    ext {
        JWT_TOKEN = '0.9.0'
        SWAGGER= '2.6.1'
        GUAVA= '21.0'
        COMMON_IO= '2.5'
        MODEL_MAPPER_VERSION = '1.1.0'

        //Tests
        REST_ASSURED = '3.0.5'
    }
buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath("net.ltgt.gradle:gradle-apt-plugin:0.8")
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE")
        classpath("de.undercouch:gradle-download-task:3.2.0")
    }
}


/**
 * Include the gradle-download-task plugin
 */


apply plugin: 'net.ltgt.apt'
apply plugin: 'de.undercouch.download'
apply plugin: 'org.springframework.boot'

import de.undercouch.gradle.tasks.download.Download


jar {
    baseName = project.name
    version =  project.version
}

dependencies {
    
    // COMPILE
    compile project(':common')
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-tomcat")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-devtools")
    compile("com.fasterxml.jackson.core:jackson-databind")
    compile("com.fasterxml.jackson.core:jackson-annotations")
    compile("joda-time:joda-time")
    compile("io.springfox:springfox-swagger2:${SWAGGER}")
    compile("io.springfox:springfox-swagger-ui:${SWAGGER}")
    compile("io.jsonwebtoken:jjwt:${JWT_TOKEN}")
    compile("com.google.guava:guava:${GUAVA}")
    compile("commons-io:commons-io:${COMMON_IO}")
    compile("org.modelmapper:modelmapper:${MODEL_MAPPER_VERSION}")

    // TEST
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("io.rest-assured:spring-mock-mvc:${REST_ASSURED}")
    
    // RUNTIME    
    runtime("com.h2database:h2")
    //runtime("mysql:mysql-connector-java")
}

task downloadRedoc(type: Download) {
    src  "https://rebilly.github.io/ReDoc/releases/latest/redoc.min.js"
    dest "${sourceSets.main.resources.srcDirs[0]}/public/redoc"
    overwrite true
}

task var {
    doLast {
	    sourceSets {
	    	main {
	    		println "java.srcDirs = ${java.srcDirs}"
	    		println "resources.srcDirs = ${resources.srcDirs[0]}"
	    		println "output.classesDir = ${output.classesDir}"
	    		println "output.resourcesDir = ${output.resourcesDir}"
	    	}
	    }
    }
}


compileJava {
    options.compilerArgs = [
            '-Amapstruct.defaultComponentModel=spring',
            '-Amapstruct.unmappedTargetPolicy=IGNORE'
    ]
}

compileJava.dependsOn downloadRedoc

