buildscript {
    ext {
        JWT_TOKEN = '0.9.0'
        SWAGGER= '2.6.1'
        GUAVA= '21.0'
        COMMON_IO= '2.5'
        LOMBOK_VERSION = '1.16.12'
        MAPPER_STRUCT_VERSION = '1.2.0.Final'

        //Tests
        REST_ASSURED = '3.0.5'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.9.RELEASE")
    }
}

/**
 * Include the gradle-download-task plugin
 */
plugins {
    id 'de.undercouch.download' version '3.2.0'
    id 'net.ltgt.apt' version '0.8'
}
import de.undercouch.gradle.tasks.download.Download


apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'net.ltgt.apt'


jar {
    baseName = project.name
    version =  project.version
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    
    // COMPILE
    compile project(':fix-common')
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-tomcat")
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-jdbc")
    compile("org.springframework.boot:spring-boot-devtools")
    compile("com.fasterxml.jackson.core:jackson-databind")
    compile("com.fasterxml.jackson.core:jackson-annotations")

    compile("joda-time:joda-time")
    compile("io.springfox:springfox-swagger2:${SWAGGER}")
    compile("io.springfox:springfox-swagger-ui:${SWAGGER}")
    compile("io.jsonwebtoken:jjwt:${JWT_TOKEN}")
    compile("com.google.guava:guava:${GUAVA}")
    compile("commons-io:commons-io:${COMMON_IO}")

    compile("org.mapstruct:mapstruct-jdk8:${MAPPER_STRUCT_VERSION}")
    compile("org.projectlombok:lombok:${LOMBOK_VERSION}")

    // TEST
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("io.rest-assured:spring-mock-mvc:${REST_ASSURED}")
    
    // RUNTIME    
    runtime("com.h2database:h2")
    //runtime("mysql:mysql-connector-java")

    apt("org.mapstruct:mapstruct-processor:${MAPPER_STRUCT_VERSION}")
    apt("org.projectlombok:lombok:${LOMBOK_VERSION}")

}

task downloadRedoc(type: Download) {
    src  "https://rebilly.github.io/ReDoc/releases/latest/redoc.min.js"
    dest "${sourceSets.main.resources.srcDirs[0]}/public/redoc"
    overwrite true
}

task var {
    doLast {
	    sourceSets {
	    	main {
	    		println "java.srcDirs = ${java.srcDirs}"
	    		println "resources.srcDirs = ${resources.srcDirs[0]}"
	    		println "output.classesDir = ${output.classesDir}"
	    		println "output.resourcesDir = ${output.resourcesDir}"
	    	}
	    }
    }
}


compileJava {
    options.compilerArgs = [
            '-Amapstruct.defaultComponentModel=spring',
            '-Amapstruct.unmappedTargetPolicy=IGNORE'
    ]
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.5'
}

compileJava.dependsOn downloadRedoc

